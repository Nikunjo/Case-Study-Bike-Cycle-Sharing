
# Working directory

getwd()


# Installing Data Packages

install.packages("tidyverse")
install.packages("markdown")
install.packages("sqldf")
install.packages("maps")
install.packages("rgdal")
install.packages("ggrepel")
library("tidyverse")
library("lubricate")
library("markdown")
library("sqldf")
library("maps")
library("rgdal")
library("ggrepel")
library(dplyr)
library(ggplot2)


# Creating dataframes for each .csv file.

apr_20 <- read.csv("April20.csv")
may_20 <- read.csv("May20.csv")
jun_20 <- read.csv("June20.csv")
jul_20 <- read.csv("July20.csv")
aug_20 <- read.csv("August20.csv")
sep_20 <- read.csv("September20.csv")
oct_20 <- read.csv("October20.csv")
nov_20 <- read.csv("November20.csv")
dec_20 <- read.csv("December20.csv")
jan_21 <- read.csv("January21.csv")
feb_21 <- read.csv("February21.csv")
mar_21 <- read.csv("March21.csv")



#  Glimpsing a dataframe

glimpse(dec_20)



# Merging all the dataframes together
## first, calculate the number of rows in total to verify the merge

tot_rows <- nrow(apr_20) + nrow(may_20) + nrow(jun_20) + nrow(jul_20) + nrow(aug_20) + nrow(sep_20) + nrow(oct_20) + nrow(nov_20) + nrow(dec_20) + nrow(jan_21) + nrow(feb_21) + nrow(mar_21)



### then create the bind

df_1 <- do.call("rbind", list(apr_20, may_20, jun_20, jul_20, aug_20, sep_20, oct_20, nov_20, dec_20, jan_21, feb_21, mar_21))



# checking the number of rows match up

if (tot_rows == nrow(df_1)){
  print("Binding complete, data verified.")
} else{
  print("Error, please verify your data.")
}


# Counting total numbers of members and casual and displaying it

members <- sqldf ("select count(member_casual) AS membercount
                 from df_1
                 where member_casual='member'")
members

casuals <- sqldf ("select count(member_casual) AS casualcount
                 from df_1
                 where member_casual='casual'")
casuals


# Pie Chart for members and casual

count <- c (1939441, 1349341)
lbls <- c ("Members", "Casuals")

pie(count,labels=lbls,main="Ride Count Comparison")


# changing datatypes of started_at, ended_at to datetime and ride_length to time for all dataframes

df_1 <- df_1 %>%
  mutate(started_at = as_datetime(df_1$started_at, format = "%d/%m/%Y %H:%M")) %>%
  mutate(ended_at = as_datetime(df_1$ended_at, format = "%d/%m/%Y %H:%M")) %>%
  mutate(ride_length = as.difftime(df_1$ride_length, format = "%H:%M:%S"))


# A quick analysis to find the mean of the ride_length column, and the max ride length

mean_r_length <- as.numeric(mean(df_1$ride_length))/60
cat("The average ride length over the year is:",mean_r_length,"minutes")

max_r_length <- as.numeric(max(df_1$ride_length))/3600
cat("The longest ride for the year was:",max_r_length,"hours")


# Now, going to create a new dataframe with the data I want for a visualisation.
# I will use sqldf to demonstrate some of my SQL abilities.
# creating two dataframes with top 5 start & end stations + no. of trips per mem/cas

#Top 5 starting geolocations for members

mem_start_geo <- sqldf("SELECT member_casual, start_station_name AS Start, 
                start_lat AS Starting_Latitude,
                start_lng As Starting_Longitude, count(start_station_name) AS Num_Trips
                FROM df_1
                WHERE start_station_name IS NOT ''
                AND member_casual = 'member'
                GROUP BY start_station_name
                ORDER BY count(start_station_name) DESC
                LIMIT 5", method = "auto")
                


# Top 5 starting geolocations for casuals

cas_start_geo <- sqldf("SELECT member_casual, start_station_name AS Start, 
                start_lat AS Starting_Latitude, start_lng As Starting_Longitude,
                count(start_station_name) AS Num_Trips
                FROM df_1
                WHERE start_station_name IS NOT ''
                AND member_casual = 'casual'
                GROUP BY start_station_name
                ORDER BY count(start_station_name) DESC
                LIMIT 5", method = "auto")


#Binding the two tables into a dataframe, and viewing it

start_geo <- rbind(mem_start_geo, cas_start_geo)
View(start_geo)



####Top 5 ending geolocations for members

mem_end_geo <- sqldf("SELECT member_casual, end_station_name AS End, 
                end_lat AS Ending_Latitude,
                end_lng As Ending_Longitude, count(end_station_name) AS Num_Trips
                FROM df_1
                WHERE end_station_name IS NOT ''
                AND member_casual = 'member'
                GROUP BY end_station_name
                ORDER BY count(end_station_name) DESC
                LIMIT 5", method = "auto")


####Top 5 ending geolocations for casuals

cas_end_geo <- sqldf("SELECT member_casual, end_station_name AS End, 
                end_lat AS Ending_Latitude, end_lng As Ending_Longitude,
                count(end_station_name) AS Num_Trips
                FROM df_1
                WHERE end_station_name IS NOT ''
                AND member_casual = 'casual'
                GROUP BY end_station_name
                ORDER BY count(end_station_name) DESC
                LIMIT 5", method = "auto")


# Binding the two tables into a dataframe, and viewing it

end_geo <- rbind(mem_end_geo, cas_end_geo)
View(end_geo)



# SQL Queries for the yearly Mode of day_of_week (total, members, casuals)

mode_t <- sqldf("SELECT day_of_week, member_casual, COUNT(day_of_week) AS Total
                 FROM df_1
                 GROUP BY member_casual, day_of_week
                 ORDER BY day_of_week DESC", method = "auto")


# Replacing the numerical values with names of weekdays

mode_t$day_of_week[mode_t$day_of_week == "1"] <- "Sunday"
mode_t$day_of_week[mode_t$day_of_week == "2"] <- "Monday"
mode_t$day_of_week[mode_t$day_of_week == "3"] <- "Tuesday"
mode_t$day_of_week[mode_t$day_of_week == "4"] <- "Wednesday"
mode_t$day_of_week[mode_t$day_of_week == "5"] <- "Thursday"
mode_t$day_of_week[mode_t$day_of_week == "6"] <- "Friday"
mode_t$day_of_week[mode_t$day_of_week == "7"] <- "Saturday"


#Plotting the Modes

# This function locks in the order I established so that x axis isn't sorted

mode_t$day_of_week <- factor(mode_t$day_of_week, levels = rev(unique(mode_t$day_of_week)), ordered=TRUE)


# This function finds the sum of casual and member riders, to be used to plot labels
# in the middle of each bar.

mode_t <- mode_t %>%
  arrange(day_of_week, rev(member_casual)) %>%
  group_by(day_of_week) %>%
  mutate(GTotal = cumsum(Total) - 0.5 * Total)


# A stacked bar plot with the yearly modes for all riders

Mode_plot <- ggplot(data = mode_t, aes(x = day_of_week, y = Total, fill = member_casual)) +
             scale_fill_manual(values=c(member = 'orange',  casual= 'blue')) +
  geom_col() +
  geom_text(aes(y = GTotal, label = Total), vjust = 1.5, colour = "white") +
  labs(title = "Yearly Total Rides Per Day of Week.", x = "Day of Week",
       y = "Total Rides", fill = "Rider Type") +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
Mode_plot


# A query to return results related to rideble types used by members

bike_df <- sqldf("SELECT rideable_type, member_casual, count(rideable_type) as number_of_uses
                 FROM df_1
                 GROUP BY member_casual, rideable_type
                 ORDER BY count(rideable_type) DESC", method = "auto" )


# Changing the names of the rideable type to remove the underscore

bike_df$rideable_type[bike_df$rideable_type == "classic_bike"] <- "Classic Bike"
bike_df$rideable_type[bike_df$rideable_type == "docked_bike"] <- "Docked Bike"
bike_df$rideable_type[bike_df$rideable_type == "electric_bike"] <- "Electric Bike"


# A side by side bar plot with the yearly count of rideablet for all riders

bike_plot <- ggplot(data = bike_df, aes(x = rideable_type, y = number_of_uses, fill = member_casual)) +
  scale_fill_manual(values=c(member = 'orange',  casual= 'blue')) +
  geom_col(position = "dodge") +
  geom_text(aes(label = number_of_uses),  vjust = -0.3 ,colour = "black", 
            position = position_dodge(.9)) +
  labs(title = "Yearly Total Rides Per Rideable Type.", x = "Rideable Type",
       y = "Total Rides", fill = "Rider Type") +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
bike_plot
